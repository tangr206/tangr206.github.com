<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | tangr206's Blog]]></title>
  <link href="http://tangr206.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tangr206.github.io/"/>
  <updated>2013-04-19T18:37:30+08:00</updated>
  <id>http://tangr206.github.io/</id>
  <author>
    <name><![CDATA[tom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 排序]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/19/python-sort/"/>
    <updated>2013-04-19T17:49:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/19/python-sort</id>
    <content type="html"><![CDATA[<ul>
<li><h4>复杂结构指定Key排序</h4>

先看一个例子：
```python
D = {   "serverA":{ "04-12":[12, 1333, 1232343], "04-15":[34, 15555, 343432], "04-13":[45, 44444, 45454]},  \

<pre><code>  "serverB":{ "04-12":[12, 2333, 1232343], "04-15":[34, 35555, 343432], "04-13":[45, 34444, 45454]}, \
  "serverC":{ "04-12":[12, 3333, 1232343], "04-15":[34, 25555, 343432], "04-13":[45, 24444, 45454]}, \
  "serverD":{ "04-12":[12, 4333, 1232343], "04-15":[34, 45555, 343432], "04-13":[45, 14444, 45454]}, \
  }   
</code></pre></li>
</ul>


<h1>如果我们想按照04-15各个server的第二个数值(15555,35555,25555,45555)排序：</h1>

<p>res = sorted(D.items(), key=lambda x: x[1]["04-15"][1], reverse=1)</p>

<p>for item in res:
  print item</p>

<blockquote><blockquote><blockquote><p>('serverD', {'04-13': [45, 14444, 45454], '04-12': [12, 4333, 1232343], '04-15': [34, 45555, 343432]})
('serverB', {'04-13': [45, 34444, 45454], '04-12': [12, 2333, 1232343], '04-15': [34, 35555, 343432]})
('serverC', {'04-13': [45, 24444, 45454], '04-12': [12, 3333, 1232343], '04-15': [34, 25555, 343432]})
('serverA', {'04-13': [45, 44444, 45454], '04-12': [12, 1333, 1232343], '04-15': [34, 15555, 343432]})
```</p></blockquote></blockquote></blockquote>

<p>++ #### key参数的使用</p>

<h5>key参数指定一个函数，</h5>

<h5>这个函数的实参为每个迭代器的item，经过该函数运算，返回值为每个item中需要进行对比的项（key）</h5>

<p>简单说，key参数值必须是一个函数，且这个函数只有一个参数，并且返回一个key值，作为比较使用。
如下实例：
```</p>

<blockquote><blockquote><blockquote><p>sorted("This is a test string from Andrew".split(), key=str.lower)
['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']
```</p></blockquote></blockquote></blockquote>

<h4>+ 使用Operator模块</h4>

<h5>operator中还有其它常用的函数，他们都是用c实现的，在效率上有很大的优势，</h5>

<h5>所以如果很关心sort效率，可以考虑在sorted中使用itemgetter</h5>

<p>由于以上使用key参数的方式十分普遍，python提供了相关函数，使以上方式的使用更加简单快捷。</p>

<p>operator模块提供了 operator.itemgetter(),operator.attrgetter()函数，
在 Python 2.5以后还提供了operator.methodcaller() 函数。
使用这些函数可以让上节描述的排序方法更加快捷方便：
```</p>

<h1>Modules/operator.c</h1>

<h1>itemgetter</h1>

<h1>Return a callable object that fetches the given item(s) from its operand.\n\</h1>

<h1>After, f=itemgetter(2), the call f(r) returns r[2].\n\</h1>

<h1>After, g=itemgetter(2,5,3), the call g(r) returns (r[2], r[5], r[3])");</h1>

<blockquote><blockquote><blockquote><p>a = [1,2,3] <br/>
b=operator.itemgetter(1) <br/>
b(a) <br/>
2</p>

<p>student_tuples = [</p>

<pre><code>('john', 'A', 15),
('jane', 'B', 12),
('dave', 'B', 10),
</code></pre>

<p>]
sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</p>

<p>from operator import itemgetter, attrgetter
sorted(student_tuples, key=itemgetter(2))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</p>

<p>sorted(student_objects, key=attrgetter('age'))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</p></blockquote></blockquote></blockquote>

<p>```</p>

<ul>
<li><h4>list.sort()与sorted() 区别</h4></li>
</ul>

]]></content>
  </entry>
  
</feed>
