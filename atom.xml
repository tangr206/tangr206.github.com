<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tangr206's Blog]]></title>
  <link href="http://tangr206.github.io/atom.xml" rel="self"/>
  <link href="http://tangr206.github.io/"/>
  <updated>2013-04-22T21:40:16+08:00</updated>
  <id>http://tangr206.github.io/</id>
  <author>
    <name><![CDATA[tom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python 中有用的函数]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/22/python-func/"/>
    <updated>2013-04-22T21:12:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/22/python-func</id>
    <content type="html"><![CDATA[<ol>
<li>lambda
<code>lambda</code>表达式返回一个函数对象
例子：
<code>func = lambda x,y:x+y</code>
func相当于下面这个函数
def func(x,y):
 return x+y
注意def是语句而lambda是表达式
下面这种情况下就只能用lambda而不能用def
<code>[(lambda x:x*x)(x) for x in range(1,11)]</code></li>
</ol>


<p>map，reduce，filter中的function都可以用lambda表达式来生成</p>

<ol>
<li><h2>max max</h2></li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&quot;a&quot;</span><span class="p">,</span><span class="mi">23</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="mi">34</span><span class="p">)]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">max</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">max</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">oprator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><h2>filter</h2>

<p>filter 函数的功能相当于过滤器。
调用一个布尔函数bool_func来迭代遍历每个seq中的元素；
返回一个使bool_seq返回值为true的元素的序列。</p></li>
</ol>


<figure class='code'><figcaption><span>filter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">A</span> <span class="o">=</span> <span class="p">[(</span><span class="s">&quot;a&quot;</span><span class="p">,</span><span class="mi">23</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;b&quot;</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;c&quot;</span><span class="p">,</span> <span class="mi">34</span><span class="p">)]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">12</span><span class="p">,</span> <span class="n">A</span><span class="p">)</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">23</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="mi">34</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><h2>map</h2>

<p>map函数func作用于给定序列的每个元素，并用一个列表来提供返回值</p></li>
</ol>


<figure class='code'><figcaption><span>map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">A</span><span class="p">)</span>   <span class="c">#or</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">map</span><span class="p">(</span><span class="n">operator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">A</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="mi">23</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">34</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li><h2>reduce</h2>

<p>reduce函数，func为二元函数，将func作用于seq序列的元素，
<code>每次携带一对（先前的结果以及下一个序列的元素）</code>
连续的将现有的结果和下一个值作用在获得的随后的结果上，
最后减少我们的序列为一个单一的返回值。</p></li>
</ol>


<figure class='code'><figcaption><span>map</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">print</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">,(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">))</span>
</span><span class='line'><span class="mi">28</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Tee]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/21/python-tee/"/>
    <updated>2013-04-21T18:08:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/21/python-tee</id>
    <content type="html"><![CDATA[<p>部分摘自 <a href="http://jezng.com/2012/06/inside-python-tee/#fn:1">Inside Python&#8217;s itertools.tee()</a></p>

<p><img src="http://tangr206.github.io/images/2013/python_tee.png" alt="tee" /></p>

<h3>WHAT</h3>

<p>python.iteratools.tee :
<strong> <code>Return n independent iterators from a single iterable.</code> </strong></p>

<!--more-->


<p>注意：
<code>  
Once tee() has made a split, the original iterable should not be used anywhere else;
otherwise, the iterable could get advanced without the tee objects being informed.
</code></p>

<h3>WHY</h3>

<p>instead of copying the iterable n times. The tee() uses some heuristics and strategies to
make the generation of these n iterators more memory efficient.</p>

<h3>DETAIL</h3>

<h4>Iterables, Iterators, and the Iterator Protocol</h4>

<ol>
<li><strong> Iterables </strong> are Python objects that define an <code>__iter__()</code> method, which, when called, returns an iterator.</li>
<li><strong> Iterators </strong> define the <code>__iter__()</code> method as well, but implement it by simply returning the iterator itself.
<strong> Iterators </strong> also implement a <code>next()</code> method, which returns the next element in a sequence.
To signal the end of a sequence, <code>next()</code> raises a StopIteration exception.</li>
<li>Any object that implements both <code>__iter__</code> and <code>next</code> in the aforementioned manner is said to implement the iterator protocol.</li>
</ol>


<p><a href="http://chenyufei.info/blog/2009-04-20/python-iterator-protocol-and-generator/">参考</a></p>

<p><strong> iterator protocol </strong> 使得我们可以对不同的容器（其实是任何支持遍历操作的对象，不一定是用来存放数据的容器）使用相同的方式（for 语句）进行遍历。容器可以是 list, dictionary 或者是其他用户定义的数据结构，它只需要实现 iter()方法，返回一个 iterator object 即可。真正关心如何遍历的是 iterator object，它的两个方法构成了 iterator protocol。</p>

<ol>
<li><strong>iter</strong>() 返回自身</li>
<li>next() 返回容器中的下一个对象，没有更多对象时应 raise StopIteration，一旦抛出此异常，后续的调用一定也必须抛出此异常。</li>
</ol>


<p><a href="http://docs.python.org/2/library/stdtypes.html#iterator-types">PythonDoc:</a></p>

<ol>
<li>container.<strong>iter</strong>()  Return an iterator object
The iterator objects themselves are required to support the following two methods,
which together form the iterator protocol:
2.1  iterator.<strong>iter</strong>()   Return the iterator object itself. <br/>
2.2  iterator.next()       Return the next item from the container.</li>
<li>Python&#8217;s <strong> generators </strong> provide a convenient way to implement the iterator protocol.
If a container object&#8217;s <strong>iter</strong>() method is implemented as a generator,
it will automatically return an iterator object (technically, a generator object)
supplying the <strong>iter</strong>() and next() methods.</li>
</ol>


<h4><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/">generator</a></h4>

<p>简单地讲，<code>yield</code> 的作用就是把一个函数变成一个 <code>generator</code>，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。</p>

<p>Python’s iterator protocol is simple to implement, and it works well for the common use case of for .. in loops.</p>

<p>正是因为很容易实现 Iterator Protocol . 所以我们可以在这里面做很多扩展：</p>

<p>将遍历过的元素缓存起来下次直接发回（同时可以用引用计数管理这些缓存的元素）</p>

<p><strong> Sometimes Buffering is Useful </strong>： The list itself is populated lazily – whenever any of the n iterators asks for a value at an index that is not yet in the buffer, tee() calls next on the underlying iterator, then caches and returns the new value.</p>

<p><img src="http://tangr206.github.io/images/2013/python_tee2.png" alt="tee_ref_count" /></p>

<h3>HOW</h3>

<figure class='code'><figcaption><span>tee的简单实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'> <span class="k">class</span> <span class="nc">TeeIterator</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">tee_data</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">tee_data</span><span class="p">,</span> <span class="n">TeeData</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">TeeIterator</span><span class="p">,</span> <span class="n">cls</span><span class="p">)</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">tee_data</span> <span class="o">=</span> <span class="n">tee_data</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span> <span class="o">=</span> <span class="n">TeeIterator</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">tee_data</span><span class="p">)</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__copy__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">TeeIterator</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">tee_data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="n">rv</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">tee_data</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">rv</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@classmethod</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">from_iterable</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">iterable</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">cls</span><span class="p">):</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">iterable</span><span class="o">.</span><span class="n">__copy__</span><span class="p">()</span>
</span><span class='line'>            <span class="n">tee_data</span> <span class="o">=</span> <span class="n">TeeData</span><span class="p">(</span><span class="nb">iter</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">TeeIterator</span><span class="p">(</span><span class="n">tee_data</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">TeeData</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">iterator</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">iterator</span> <span class="o">=</span> <span class="n">iterator</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">buffer</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">index</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">buffer</span><span class="p">):</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">buffer</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">iterator</span><span class="p">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">buffer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tee</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;n must be &gt;= 0&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="s">&#39;__copy__&#39;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">copyable</span> <span class="o">=</span> <span class="n">iterable</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="n">copyable</span> <span class="o">=</span> <span class="n">TeeIterator</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">iterable</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="p">[</span> <span class="n">copyable</span> <span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">copyable</span><span class="o">.</span><span class="n">__copy__</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Command 收集]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/21/linux-command-learning/"/>
    <updated>2013-04-21T16:59:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/21/linux-command-learning</id>
    <content type="html"><![CDATA[<ul>
<li><h3>find 查找当前目录下在5分钟内被**过的文件</h3>

<p><code>find . -amin -5</code></p></li>
<li>访问过用amin，修改过用mmin，文件状态改变过用cmin</li>
<li>精确到分钟的用i <strong> amin,mmin,cmin </strong></li>
<li>精确到天的用 <strong> atime,mtime,ctime </strong></li>
<li>在5分钟之内的用-5，在5分钟以上的用＋5</li>
</ul>


<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 排序]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/19/python-sort/"/>
    <updated>2013-04-19T17:49:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/19/python-sort</id>
    <content type="html"><![CDATA[<p><a href="http://www.python.org/dev/peps/pep-0265/">字典排序入门,</a> : 解释为什么python中的字典不提供sort函数</p>

<p><a href="http://zuroc.42qu.com/10492195">Python中最快的字典排序方法</a> : 简单的说, 用itemgetter比lambda快, iteritems比其他快</p>

<ul>
<li><h4>复杂结构指定Key排序</h4>

<p>先看一个例子：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">D</span> <span class="o">=</span> <span class="p">{</span>   <span class="s">&quot;serverA&quot;</span><span class="p">:{</span> <span class="s">&quot;04-12&quot;</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&quot;04-15&quot;</span><span class="p">:[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">15555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">],</span> <span class="s">&quot;04-13&quot;</span><span class="p">:[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">44444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">]},</span>  \
</span><span class='line'>        <span class="s">&quot;serverB&quot;</span><span class="p">:{</span> <span class="s">&quot;04-12&quot;</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&quot;04-15&quot;</span><span class="p">:[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">35555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">],</span> <span class="s">&quot;04-13&quot;</span><span class="p">:[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">34444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">]},</span> \
</span><span class='line'>        <span class="s">&quot;serverC&quot;</span><span class="p">:{</span> <span class="s">&quot;04-12&quot;</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">3333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&quot;04-15&quot;</span><span class="p">:[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">25555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">],</span> <span class="s">&quot;04-13&quot;</span><span class="p">:[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">24444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">]},</span> \
</span><span class='line'>        <span class="s">&quot;serverD&quot;</span><span class="p">:{</span> <span class="s">&quot;04-12&quot;</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&quot;04-15&quot;</span><span class="p">:[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">45555</span><span class="p">,</span> <span class="mi">243432</span><span class="p">],</span> <span class="s">&quot;04-13&quot;</span><span class="p">:[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">14444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">]},</span> \
</span><span class='line'>        <span class="s">&quot;serverE&quot;</span><span class="p">:{</span> <span class="s">&quot;04-12&quot;</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&quot;04-15&quot;</span><span class="p">:[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">45555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">],</span> <span class="s">&quot;04-13&quot;</span><span class="p">:[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">14444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">]},</span> \
</span><span class='line'>        <span class="s">&quot;serverF&quot;</span><span class="p">:{</span> <span class="s">&quot;04-12&quot;</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&quot;04-15&quot;</span><span class="p">:[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">45555</span><span class="p">,</span> <span class="mi">143432</span><span class="p">],</span> <span class="s">&quot;04-13&quot;</span><span class="p">:[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">14444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">]},</span> \
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>如果我们想按照
<code>
04-15日各个server的第二个数值(15555,35555,25555,45555)升序排序，
相同的话按第三个数值降序排
</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">D</span><span class="o">.</span><span class="n">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">&quot;04-15&quot;</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span> <span class="o">-</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s">&quot;04-15&quot;</span><span class="p">][</span><span class="mi">2</span><span class="p">]))</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">res</span><span class="p">:</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>   <span class="k">print</span> <span class="n">item</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;serverA&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;04-13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">44444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">],</span> <span class="s">&#39;04-12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">1333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&#39;04-15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">15555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">]})</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;serverC&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;04-13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">24444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">],</span> <span class="s">&#39;04-12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">3333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&#39;04-15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">25555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">]})</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;serverB&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;04-13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">34444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">],</span> <span class="s">&#39;04-12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&#39;04-15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">35555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">]})</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;serverE&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;04-13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">14444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">],</span> <span class="s">&#39;04-12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&#39;04-15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">45555</span><span class="p">,</span> <span class="mi">343432</span><span class="p">]})</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;serverD&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;04-13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">14444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">],</span> <span class="s">&#39;04-12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&#39;04-15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">45555</span><span class="p">,</span> <span class="mi">243432</span><span class="p">]})</span>
</span><span class='line'><span class="p">(</span><span class="s">&#39;serverF&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s">&#39;04-13&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">45</span><span class="p">,</span> <span class="mi">14444</span><span class="p">,</span> <span class="mi">45454</span><span class="p">],</span> <span class="s">&#39;04-12&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4333</span><span class="p">,</span> <span class="mi">1232343</span><span class="p">],</span> <span class="s">&#39;04-15&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">34</span><span class="p">,</span> <span class="mi">45555</span><span class="p">,</span> <span class="mi">143432</span><span class="p">]})</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>key参数的使用</h4>

<p>key参数指定一个函数，这个函数的 <strong> 实参为每个迭代器的item </strong>，经过该函数运算，<strong>返回值为每个item中需要进行对比的项（key）</strong>
简单说，key参数值必须是一个函数，且这个函数只有一个参数，并且返回一个key值，作为比较使用。
如下实例：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="s">&quot;This is a test string from Andrew&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span><span class='line'><span class="p">[</span><span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="s">&#39;Andrew&#39;</span><span class="p">,</span> <span class="s">&#39;from&#39;</span><span class="p">,</span> <span class="s">&#39;is&#39;</span><span class="p">,</span> <span class="s">&#39;string&#39;</span><span class="p">,</span> <span class="s">&#39;test&#39;</span><span class="p">,</span> <span class="s">&#39;This&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><h4>使用Operator模块</h4></li>
</ul>


<p>由于以上使用key参数的方式十分普遍，python提供了相关函数，使以上方式的使用更加简单快捷。</p>

<p>operator模块提供了 <strong>operator.itemgetter(),operator.attrgetter()</strong>函数，
在 Python 2.5以后还提供了operator.methodcaller() 函数。
使用这些函数可以让上节描述的排序方法更加快捷方便：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#Modules/operator.c</span>
</span><span class='line'><span class="c">#itemgetter</span>
</span><span class='line'><span class="c">#Return a callable object that fetches the given item(s) from its operand.\n\</span>
</span><span class='line'><span class="c">#After, f=itemgetter(2), the call f(r) returns r[2].\n\</span>
</span><span class='line'><span class="c">#After, g=itemgetter(2,5,3), the call g(r) returns (r[2], r[5], r[3])&quot;);</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="o">=</span><span class="n">operator</span><span class="o">.</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="mi">2</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">student_tuples</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;john&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;jane&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span>
</span><span class='line'>    <span class="p">(</span><span class="s">&#39;dave&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">student_tuples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">student</span><span class="p">:</span> <span class="n">student</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>   <span class="c"># sort by age</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;dave&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;jane&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;john&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">)]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="nn">operator</span> <span class="kn">import</span> <span class="n">itemgetter</span><span class="p">,</span> <span class="n">attrgetter</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">student_tuples</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">itemgetter</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;dave&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;jane&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;john&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">)]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">student_objects</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">attrgetter</span><span class="p">(</span><span class="s">&#39;age&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">[(</span><span class="s">&#39;dave&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;jane&#39;</span><span class="p">,</span> <span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="mi">12</span><span class="p">),</span> <span class="p">(</span><span class="s">&#39;john&#39;</span><span class="p">,</span> <span class="s">&#39;A&#39;</span><span class="p">,</span> <span class="mi">15</span><span class="p">)]</span>
</span></code></pre></td></tr></table></div></figure>


<p>operator中还有其它常用的函数，他们都是用c实现的，在效率上有很大的优势，
所以如果很关心 <strong> sort效率 </strong> ，可以考虑在sorted中使用itemgetter.
<a href="http://www.ibm.com/developerworks/cn/cloud/library/cl-bigdata/">比如MapReduce中大量使用字典排序</a></p>

<ul>
<li><h4><code>list.sort()</code> 与<code>sorted()</code> 区别</h4>

<p>++ 第一,<code>list.sort()</code>没有返回值，只对list原地排序；而<code>sorted()</code>将排序后序列作为新list返回
++ 第二，<code>list.sort()</code>只应用于list，而<code>sorted()</code>可用于任意迭代器</p></li>
</ul>


<p><a href="http://docs.python.org/2/howto/sorting.html">参考</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[usefull git &amp; rake commands]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/18/usefull-git-and-rake-commands/"/>
    <updated>2013-04-18T21:37:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/18/usefull-git-and-rake-commands</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OctoPress. 安装使用中的坑]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/18/hi-octopress/"/>
    <updated>2013-04-18T20:44:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/18/hi-octopress</id>
    <content type="html"><![CDATA[<p>1.Ubuntu中如果装了两个版本的ruby在使用时会有问题</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;usefull git &amp; rake commands&quot;</span><span class="o">]</span>
</span><span class='line'>Could not find RedCloth-4.2.9 in any of the sources
</span><span class='line'>Run <span class="sb">`</span>bundle install<span class="sb">`</span> to install missing gems.
</span><span class='line'>
</span><span class='line'>解决办法： 可以使用rvm选择ruby版本
</span><span class='line'><span class="nv">$rvm</span> use ruby-1.9.2-p290
</span></code></pre></td></tr></table></div></figure>


<p>2.在执行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add origin git@github.com:defnngj/hello-world.git
</span><span class='line'>错误提示：
</span><span class='line'>fatal: remote origin already exists.
</span><span class='line'>
</span><span class='line'>解决办法：
</span><span class='line'><span class="nv">$ </span>git remote rm origin
</span><span class='line'><span class="nv">$ </span>git remote add origin git@github.com:defnngj/hello-world.git
</span><span class='line'>就不会报错误了
</span></code></pre></td></tr></table></div></figure>


<p>3.虽然按照官网流程完成了ssh相关的配置的安装，
但是deploy的时候还是提示Permission denied (publickey).错误</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rake deply
</span><span class='line'>Agent admitted failure to sign using the key.
</span><span class='line'>Permission denied <span class="o">(</span>publickey<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'><span class="o">[</span>解决办法<span class="o">](</span>http://stackoverflow.com/questions/2546005/git-and-ssh-authorizating<span class="o">)</span>
</span><span class='line'><span class="nv">$ </span>sh-add ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>4.<a href="http://blog.log4d.com/2012/05/tag-cloud/">添加标签和分类</a></p>

<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;以下是copy的安装流程&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-
http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</p>

<div class="entry-content"><p>github真是无所不能。其<a href="http://pages.github.com/">Pages功能</a>支持上传html，并且在页面中显示。于是有好事者做了一个基于github的博客管理工具：<a href="http://octopress.org/">octopress</a>，基本原理是用git来管理你的文章，然后最终发布到github上成为一个独立博客站点。由于github支持CNAME域名指向，所以如果有独立域名的话，可以基于这些做出一个专业的博客站点出来。</p>

<p>本博客就是完全基于此搭建起来的，在使用了2个月之后，我将原系统根据中国人的需求做了一些配置，去掉了GFW会挡住的google font api，以及替换掉了速度超慢的国外的评论系统，也加上了分享到国内的微博的功能。现在把这些都总结出来，希望大家都可以方便地搭建基于github的博客来。</p>

<!--more-->


<h2>安装</h2>

<p>首先说说怎么安装相应的工具。其实这些内容在 <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a> 上都有，我只是把它大概翻译了一下。</p>

<h3>安装rvm和ruby</h3>

<p>参考文档：<a href="http://octopress.org/docs/setup/rvm/">http://octopress.org/docs/setup/rvm/</a>，主要3步：</p>

<p>首先安装：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)</span></code></pre></td></tr></tbody></table></div></figure>


<p>然后设置classpath:</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
</span><span class="line">source ~/.bash_profile
</span><span class="line">
</span><span class="line"># If using Zsh do this instead
</span><span class="line">echo '[[ -s $HOME/.rvm/scripts/rvm ]] &amp;&amp; source $HOME/.rvm/scripts/rvm' &gt;&gt; ~/.zshrc
</span><span class="line">source ~/.zshrc</span></code></pre></td></tr></tbody></table></div></figure>


<p>最后安装ruby:</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rvm install 1.9.2 &amp;&amp; rvm use 1.9.2
</span><span class="line">rvm rubygems latest</span></code></pre></td></tr></tbody></table></div></figure>


<h3>安装Octopress</h3>

<p>首先从github上将源码clone下来：</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line">cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
</span><span class="line">ruby --version  # Should report Ruby 1.9.2</span></code></pre></td></tr></tbody></table></div></figure>


<p>然后安装依赖:</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">gem install bundler
</span><span class="line">rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class="line">bundle install</span></code></pre></td></tr></tbody></table></div></figure>


<p>最后安装Octopress</p>

<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake install</span></code></pre></td></tr></tbody></table></div></figure>


<h3>配置</h3>

<p>安装好之后可以简单配置一下：</p>

<ul>
<li>主要是修改文件：_config.yml ，这个配置文件都有相应的注释。主要就是改一些博客头，作者名之类的东西。
注意最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。</li>
<li>修改定制文件/source/_includes/custom/head.html 把google的自定义字体去掉，原因同上。</li>
</ul>


<h2>设置github账号</h2>

<p>基于github的博客当然需要先注册github账号，Github的账号注册地址是：<a href="https://github.com/signup/free">https://github.com/signup/free</a> 。申请好github账号后，建一个名为 username.github.com 的代码仓库。这里注意username必须是和你的账号名一致。</p>

<h2>写博客方法</h2>

<p>然后就可以写博客啦～ 写博客主要是用以下几个命令，<a href="http://octopress.org/docs/blogging/">这里</a>有详细介绍：</p>

<ul>
<li>rake new_post[‘article name’] 生成博文框架，然后修改生成的文件即可</li>
<li>rake generate 生成静态文件</li>
<li>rake watch 检测文件变化，实时生成新内容</li>
<li>rake preview 在本机4000端口生成访问内容</li>
<li>rake deploy 发布文件</li>
</ul>


<p>博文是采用markdown语法，另外增加了一些扩充的插件，markdown的介绍文章网上可以搜到很多，比如<a href="http://daringfireball.net/projects/markdown/">这个</a>。</p>

<h2>高级配置</h2>

<p>我主要介绍一下如何配置评论和分享到微博功能。步骤如下：</p>

<ul>
<li>在_config.yml中增加一项： weibo_share: true</li>
<li>修改 source/_includes/post/sharing.html ，增加：</li>
</ul>


<figure class="code"><div class="highlight"><table><tbody><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">  // 下面的大括号是全角的，如果复制，请自行改成半角
</span><span class="line"> ｛% if site.weibo_share %｝
</span><span class="line">     ｛% include post/weibo.html %｝
</span><span class="line"> ｛% endif %｝</span></code></pre></td></tr></tbody></table></div></figure>


<ul>
<li>增加文件：source/_includes/post/weibo.html</li>
<li>访问 <a href="http://www.jiathis.com/">http://www.jiathis.com/</a> ，获取分享的代码</li>
<li>访问 <a href="http://uyan.cc/">http://uyan.cc/</a> ，获得评论的代码</li>
<li>将上面2步的代码都加入到weibo.html中即可</li>
</ul>


<h2>Tips</h2>

<h4>从wordpress迁移到github</h4>

<p>这儿有一篇文章介绍了如何做迁移：
<a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></p>

<h4>图片</h4>

<p>如果要在文章中上传图片，直接copy到 /source/images目录下即可。在文章中可以直接引用。也可以选一些大的图床站点，例如flickr之类的放在那边。</p>

<h4>域名</h4>

<p>如果你象我一样有自己的域名，可以将域名指向这个博客，具体步骤是：</p>

<ul>
<li>在域名管理中，建立一个CNAME指向，将你的域名指向 yourname.github.com</li>
<li>建一个名为CNAME的文件在source目录下，然后将自己的域名输入进去。</li>
<li>将内容push到github后，第一次生效大概等1小时，之后你就可以用自己的域名访问了。</li>
</ul>


<h4>参考</h4>

<p>这儿还有一些参考的文章：</p>

<ul>
<li><a href="http://www.yangzhiping.com/tech/octopress.html">http://www.yangzhiping.com/tech/octopress.html</a></li>
<li><a href="http://blog.xupeng.me/2011/12/14/migrate-to-octopress/">http://blog.xupeng.me/2011/12/14/migrate-to-octopress/</a></li>
</ul>

</div>

]]></content>
  </entry>
  
</feed>
