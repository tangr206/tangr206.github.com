<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | tangr206's Blog]]></title>
  <link href="http://tangr206.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://tangr206.github.io/"/>
  <updated>2013-04-21T19:22:34+08:00</updated>
  <id>http://tangr206.github.io/</id>
  <author>
    <name><![CDATA[tom]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Tee]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/21/python-tee/"/>
    <updated>2013-04-21T18:08:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/21/python-tee</id>
    <content type="html"><![CDATA[<p>部分摘自 <a href="http://jezng.com/2012/06/inside-python-tee/#fn:1">Inside Python's itertools.tee()</a></p>

<p><img src="/images/2013/python_tee.png" alt="tee" /></p>

<h3>WHAT</h3>

<p>python.iteratools.tee :
<strong> <code>Return n independent iterators from a single iterable.</code> </strong></p>

<!--more-->


<p>注意：
<code>  
Once tee() has made a split, the original iterable should not be used anywhere else;
otherwise, the iterable could get advanced without the tee objects being informed.
</code></p>

<h3>WHY</h3>

<p>instead of copying the iterable n times. The tee() uses some heuristics and strategies to
make the generation of these n iterators more memory efficient.</p>

<h3>DETAIL</h3>

<h4>Iterables, Iterators, and the Iterator Protocol</h4>

<ol>
<li><strong> Iterables </strong> are Python objects that define an <code>__iter__()</code> method, which, when called, returns an iterator.</li>
<li><strong> Iterators </strong> define the <code>__iter__()</code> method as well, but implement it by simply returning the iterator itself.
<strong> Iterators </strong> also implement a <code>next()</code> method, which returns the next element in a sequence.
To signal the end of a sequence, <code>next()</code> raises a StopIteration exception.</li>
<li>Any object that implements both <code>__iter__</code> and <code>next</code> in the aforementioned manner is said to implement the iterator protocol.</li>
</ol>


<p><a href="http://chenyufei.info/blog/2009-04-20/python-iterator-protocol-and-generator/">参考</a></p>

<p><strong> iterator protocol </strong> 使得我们可以对不同的容器（其实是任何支持遍历操作的对象，不一定是用来存放数据的容器）使用相同的方式（for 语句）进行遍历。容器可以是 list, dictionary 或者是其他用户定义的数据结构，它只需要实现 iter()方法，返回一个 iterator object 即可。真正关心如何遍历的是 iterator object，它的两个方法构成了 iterator protocol。</p>

<ol>
<li><strong>iter</strong>() 返回自身</li>
<li>next() 返回容器中的下一个对象，没有更多对象时应 raise StopIteration，一旦抛出此异常，后续的调用一定也必须抛出此异常。</li>
</ol>


<p><a href="http://docs.python.org/2/library/stdtypes.html#iterator-types">PythonDoc:</a></p>

<ol>
<li>container.<strong>iter</strong>()  Return an iterator object
The iterator objects themselves are required to support the following two methods,
which together form the iterator protocol:
2.1  iterator.<strong>iter</strong>()   Return the iterator object itself. <br/>
2.2  iterator.next()       Return the next item from the container.</li>
<li>Python's <strong> generators </strong> provide a convenient way to implement the iterator protocol.
If a container object's <strong>iter</strong>() method is implemented as a generator,
it will automatically return an iterator object (technically, a generator object)
supplying the <strong>iter</strong>() and next() methods.</li>
</ol>


<h4><a href="http://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/">generator</a></h4>

<p>简单地讲，<code>yield</code> 的作用就是把一个函数变成一个 <code>generator</code>，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。</p>

<p>Python’s iterator protocol is simple to implement, and it works well for the common use case of for .. in loops.</p>

<p>正是因为很容易实现 Iterator Protocol . 所以我们可以在这里面做很多扩展：</p>

<p>将遍历过的元素缓存起来下次直接发回（同时可以用引用计数管理这些缓存的元素）</p>

<p><strong> Sometimes Buffering is Useful </strong>： The list itself is populated lazily – whenever any of the n iterators asks for a value at an index that is not yet in the buffer, tee() calls next on the underlying iterator, then caches and returns the new value.</p>

<p><img src="/images/2013/python_tee2.png" alt="tee_ref_count" /></p>

<h3>HOW</h3>

<p>```python  tee的简单实现
 class TeeIterator(object):</p>

<pre><code>    def __new__(cls, tee_data):
        if isinstance(tee_data, TeeData):
            self = super(TeeIterator, cls).__new__(cls)
            self.tee_data = tee_data
        else:
            self = TeeIterator.from_iterable(tee_data)
        self.index = 0
        return self

    def __copy__(self):
        return TeeIterator(self.tee_data)

    def __iter__(self):
        return self

    def next(self):
        rv = self.tee_data[self.index]
        self.index += 1
        return rv

    @classmethod
    def from_iterable(cls, iterable):
        if isinstance(iterable, cls):
            return iterable.__copy__()
        tee_data = TeeData(iter(iterable))
        return TeeIterator(tee_data)

class TeeData(object):

    def __init__(self, iterator):
        self.iterator = iterator
        self.buffer = []

    def __getitem__(self, index):
        if index == len(self.buffer):
            self.buffer.append(next(self.iterator))
        return self.buffer[index]

def tee(iterable, n=2):

    if n &lt; 0:
        raise ValueError("n must be &gt;= 0")
    elif n == 0:
        return ()

    if hasattr(iterable, '__copy__'):
        copyable = iterable
    else:
        copyable = TeeIterator.from_iterable(iterable)

    result = [ copyable ]

    for i in xrange(1, n):
        result.append(copyable.__copy__())

    return tuple(result)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 排序]]></title>
    <link href="http://tangr206.github.io/blog/2013/04/19/python-sort/"/>
    <updated>2013-04-19T17:49:00+08:00</updated>
    <id>http://tangr206.github.io/blog/2013/04/19/python-sort</id>
    <content type="html"><![CDATA[<p><a href="http://www.python.org/dev/peps/pep-0265/">字典排序入门,</a> : 解释为什么python中的字典不提供sort函数</p>

<p><a href="http://zuroc.42qu.com/10492195">Python中最快的字典排序方法</a> : 简单的说, 用itemgetter比lambda快, iteritems比其他快</p>

<ul>
<li><h4>复杂结构指定Key排序</h4>

先看一个例子：
```python
D = {   "serverA":{ "04-12":[12, 1333, 1232343], "04-15":[34, 15555, 343432], "04-13":[45, 44444, 45454]},  \

<pre><code>  "serverB":{ "04-12":[12, 2333, 1232343], "04-15":[34, 35555, 343432], "04-13":[45, 34444, 45454]}, \
  "serverC":{ "04-12":[12, 3333, 1232343], "04-15":[34, 25555, 343432], "04-13":[45, 24444, 45454]}, \
  "serverD":{ "04-12":[12, 4333, 1232343], "04-15":[34, 45555, 343432], "04-13":[45, 14444, 45454]}, \
  }   
</code></pre>

<p>```</p></li>
</ul>


<!--more-->


<p>如果我们想按照04-15各个server的第二个数值(15555,35555,25555,45555)排序：
```</p>

<blockquote><blockquote><blockquote><p>res = sorted(D.items(), key=lambda x: x[1]["04-15"][1], reverse=1)
for item in res:
  print item</p>

<p>('serverD', {'04-13': [45, 14444, 45454], '04-12': [12, 4333, 1232343], '04-15': [34, 45555, 343432]})
('serverB', {'04-13': [45, 34444, 45454], '04-12': [12, 2333, 1232343], '04-15': [34, 35555, 343432]})
('serverC', {'04-13': [45, 24444, 45454], '04-12': [12, 3333, 1232343], '04-15': [34, 25555, 343432]})
('serverA', {'04-13': [45, 44444, 45454], '04-12': [12, 1333, 1232343], '04-15': [34, 15555, 343432]})
```</p></blockquote></blockquote></blockquote>

<ul>
<li><h4>key参数的使用</h4>

key参数指定一个函数，这个函数的 <strong> 实参为每个迭代器的item </strong>，经过该函数运算，<strong>返回值为每个item中需要进行对比的项（key）</strong>
简单说，key参数值必须是一个函数，且这个函数只有一个参数，并且返回一个key值，作为比较使用。
如下实例：
```

<blockquote><blockquote><blockquote><p>sorted("This is a test string from Andrew".split(), key=str.lower)
['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']
```</p></blockquote></blockquote></blockquote></li>
<li><h4>使用Operator模块</h4></li>
</ul>


<p>由于以上使用key参数的方式十分普遍，python提供了相关函数，使以上方式的使用更加简单快捷。</p>

<p>operator模块提供了 <strong>operator.itemgetter(),operator.attrgetter()</strong>函数，
在 Python 2.5以后还提供了operator.methodcaller() 函数。
使用这些函数可以让上节描述的排序方法更加快捷方便：
```</p>

<h1>Modules/operator.c</h1>

<h1>itemgetter</h1>

<h1>Return a callable object that fetches the given item(s) from its operand.\n\</h1>

<h1>After, f=itemgetter(2), the call f(r) returns r[2].\n\</h1>

<h1>After, g=itemgetter(2,5,3), the call g(r) returns (r[2], r[5], r[3])");</h1>

<blockquote><blockquote><blockquote><p>a = [1,2,3] <br/>
b=operator.itemgetter(1) <br/>
b(a) <br/>
2
student_tuples = [</p>

<pre><code>('john', 'A', 15),
('jane', 'B', 12),
('dave', 'B', 10),
</code></pre>

<p>]
sorted(student_tuples, key=lambda student: student[2])   # sort by age
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</p>

<p>from operator import itemgetter, attrgetter
sorted(student_tuples, key=itemgetter(2))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</p>

<p>sorted(student_objects, key=attrgetter('age'))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</p></blockquote></blockquote></blockquote>

<p>```
operator中还有其它常用的函数，他们都是用c实现的，在效率上有很大的优势，
所以如果很关心 <strong> sort效率 </strong> ，可以考虑在sorted中使用itemgetter.
<a href="http://www.ibm.com/developerworks/cn/cloud/library/cl-bigdata/">比如MapReduce中大量使用字典排序</a></p>

<ul>
<li><h4><code>list.sort()</code> 与<code>sorted()</code> 区别</h4>

<p>++ 第一,<code>list.sort()</code>没有返回值，只对list原地排序；而<code>sorted()</code>将排序后序列作为新list返回
++ 第二，<code>list.sort()</code>只应用于list，而<code>sorted()</code>可用于任意迭代器</p></li>
</ul>


<p><a href="http://docs.python.org/2/howto/sorting.html">参考</a></p>
]]></content>
  </entry>
  
</feed>
